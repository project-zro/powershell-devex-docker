name: Docker Build, Scan and Publish

on:
  push:
    branches:
      - master

  release:
    types: [published]

  # Run tests for any PR.
  pull_request:

  # Manual run
  workflow_dispatch:

env:
  IMAGE_NAME: powershell-devex

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --tag localbuild/testimage:latest
          fi
      - name: Run the Anchore scan action itself with GitHub Advanced Security code scanning integration enabled
        uses: anchore/scan-action@main
        with:
          image: "localbuild/testimage:latest"
          acs-report-enable: true
          fail-build: true
          severity-cutoff: critical
      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
  # Push image to GitHub Packages.
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' || github.event_name == 'release'
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME
  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #     - name: Push image
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
